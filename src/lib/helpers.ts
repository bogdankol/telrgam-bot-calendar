import { DateTime } from 'luxon'
import { TIMEZONE } from './vars'
import { calendar_v3 } from 'googleapis'

// --- –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–Ω–µ–π ---
export async function getAvailableDays(
	daysAhead = 30,
	minDays = 10,
	myCalendar: calendar_v3.Calendar,
	myCalendarId: string,
	workCalendarId: string,
) {
	const now = DateTime.now().setZone(TIMEZONE)
	const candidateDays: DateTime[] = []

	for (let i = 1; i <= daysAhead; i++) {
		const day = now.plus({ days: i })
		const weekday = day.weekday // 1 = Monday, 7 = Sunday
		if (weekday === 6 || weekday === 7) continue // –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—ã—Ö–æ–¥–Ω—ã–µ
		candidateDays.push(day)
	}

	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–Ω–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
	const results = await Promise.all(
		candidateDays.map(async day => {
			const slots = await getAvailableSlotsForDay(
				day,
				myCalendar,
				myCalendarId,
				workCalendarId,
			)
			return { day, hasSlots: slots.length > 0 }
		}),
	)

	// –û—Ç–±–∏—Ä–∞–µ–º –¥–Ω–∏ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏
	const availableDays = results
		.filter(r => r.hasSlots)
		.map(r => r.day)
		.slice(0, minDays)

	// –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ–Ω—å—à–µ, –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–µ –∏–∑ —Å–ø–∏—Å–∫–∞ (–¥–ª—è minDays)
	while (
		availableDays.length < minDays &&
		availableDays.length < results.length
	) {
		const next = results[availableDays.length]
		if (next) availableDays.push(next.day)
		else break
	}

	return availableDays
}

// --- –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–æ—Ç–æ–≤ ---
export async function getAvailableSlotsForDay(
	day: DateTime,
	myCalendar: calendar_v3.Calendar,
	myCalendarId: string,
	workCalendarId: string,
) {
	const startHour = 11
	const endHour = 19
	const meetingDuration = 60 // –º–∏–Ω
	const breakAfterMeeting = 0 // –º–∏–Ω
	const maxMeetingsPerDay = 8

	// ‚úÖ –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ day –∏–º–µ–µ—Ç –Ω—É–∂–Ω—É—é –∑–æ–Ω—É
	let slotStart = day.setZone(TIMEZONE).set({
		hour: startHour,
		minute: 0,
		second: 0,
		millisecond: 0,
	})

	const timeRanges: { start: string; end: string }[] = []

	for (let i = 0; i < maxMeetingsPerDay; i++) {
		const slotEnd = slotStart.plus({ minutes: meetingDuration })
		if (slotEnd.hour > endHour) break

		// ‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
		timeRanges.push({
			start: slotStart.toISO({ suppressMilliseconds: true })!,
			end: slotEnd.toISO({ suppressMilliseconds: true })!,
		})

		slotStart = slotEnd.plus({ minutes: breakAfterMeeting })
	}

	// üì° –û–¥–∏–Ω –æ–±—â–∏–π –∑–∞–ø—Ä–æ—Å –∫ FreeBusy API –¥–ª—è –û–ë–û–ò–• –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–π
	const res = await myCalendar.freebusy.query({
		requestBody: {
			timeMin: timeRanges[0].start,
			timeMax: timeRanges[timeRanges.length - 1].end,
			timeZone: TIMEZONE, // ‚úÖ —É–∫–∞–∑—ã–≤–∞–µ–º –∑–æ–Ω—É —è–≤–Ω–æ
			items: [{ id: myCalendarId }, { id: workCalendarId }],
		},
	})

	// üß© –û–±—ä–µ–¥–∏–Ω—è–µ–º –∑–∞–Ω—è—Ç—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
	const busyPrimary = res.data.calendars?.[myCalendarId]?.busy || []
	const busySecondary = res.data.calendars?.[workCalendarId]?.busy || []
	const allBusy = [...busyPrimary, ...busySecondary]

	// üìÜ –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å–≤–æ–±–æ–¥–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
	const availableSlots = timeRanges
		.map(range => {
			const start = DateTime.fromISO(range.start, { zone: TIMEZONE })
			const end = DateTime.fromISO(range.end, { zone: TIMEZONE })

			const overlaps = allBusy.some(
				busy =>
					DateTime.fromISO(busy.start!, { zone: TIMEZONE }) < end &&
					DateTime.fromISO(busy.end!, { zone: TIMEZONE }) > start,
			)

			return !overlaps ? { start, label: start.toFormat('HH:mm') } : null
		})
		.filter(Boolean)

	return availableSlots as { start: DateTime; label: string }[]
}

// --- —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞ ---
export function handlePhone(ctx: any, sessions: any) {
	const userId = String(ctx.from!.id)
	// console.log({ctx, userId, from: ctx?.from, ctxString: JSON.parse(JSON.stringify(ctx)).update.message})
	const session = sessions.get(userId)
	if (!session || !session.startTime) {
		return ctx.reply('–î–ª—è –ø–æ—á–∞—Ç–∫—É –≤–∏–±–µ—Ä—ñ—Ç—å –¥–µ–Ω—å —Ç–∞ —á–∞—Å –∑—É—Å—Ç—Ä—ñ—á—ñ —á–µ—Ä–µ–∑ /book.')
	}

	const contact = ctx.message.contact

	if (!contact) {
		return ctx.reply(
			'‚ö†Ô∏è –í–∏ –Ω–µ –ø–æ–¥—ñ–ª–∏–ª–∏—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º. –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É.',
		)
	}

	if (!contact.phone_number) {
		session.waitingPhone = true
		sessions.set(userId, session)
		return ctx.reply(
			'‚ö†Ô∏è –£ –≤–∞—à–æ–º—É Telegram-–∫–æ–Ω—Ç–∞–∫—Ç—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É.\n\n' +
				'–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –π–æ–≥–æ –≤—Ä—É—á–Ω—É –≤ –æ–¥–Ω–æ–º—É –∑ —Ñ–æ—Ä–º–∞—Ç—ñ–≤:\n' +
				'‚Ä¢ +0504122905\n' +
				'‚Ä¢ +050-412-29-05\n' +
				'‚Ä¢ +38-050-412-29-05\n' +
				'‚Ä¢ +380504122905\n' +
				'‚Ä¢ +38 050 412 29 05',
		)
	}

	session.phone = contact.phone_number
	session.waitingPhone = false
	session.waitingEmail = true
	sessions.set(userId, session)
	ctx.reply('–î—è–∫—É—é! —Ç–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å email –Ω–∞ —è–∫–∏–π –±—É–¥–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è:')
}

// tell phone number check
export function isValidPhone(phone: string) {
	// —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
	const cleaned = phone.replace(/[\s-]/g, '')

	// –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ü–∏—Ñ—Ä—ã –∏ –º–∞–∫—Å–∏–º—É–º –æ–¥–∏–Ω +
	if (/[^+\d]/.test(cleaned)) return false // –µ—Å—Ç—å –±—É–∫–≤—ã –∏–ª–∏ –¥—Ä—É–≥–∏–µ —Å–∏–º–≤–æ–ª—ã
	if ((cleaned.match(/\+/g) || []).length > 1) return false // –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ +
	if (!/^\+?\d{9,15}$/.test(cleaned)) return false // –¥–ª–∏–Ω–∞ –Ω–æ–º–µ—Ä–∞
	return true
}
