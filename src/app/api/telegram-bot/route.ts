import { Telegraf, Markup } from 'telegraf'
import { google, calendar_v3 } from 'googleapis'
import { NextRequest, NextResponse } from 'next/server'
import { DateTime } from 'luxon'
import { envCheck } from '@/utils/server-utils'
// import { createNewInvoiceLink } from '@/actions/server-actions'
import { TIMEZONE, SCOPES } from '@/lib/vars'
import {
	getAvailableDays,
	getAvailableSlotsForDay,
	handlePhone,
} from '@/lib/helpers'

const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN!
const bot = new Telegraf(BOT_TOKEN)

// --- Google Calendar –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ ---
const CALENDAR_ID = process.env.GOOGLE_CALENDAR_ID!
const GOOGLE_CLIENT_EMAIL = process.env.GOOGLE_CLIENT_EMAIL!
const GOOGLE_PRIVATE_KEY = process.env.GOOGLE_PRIVATE_KEY!.replace(/\\n/g, '\n')

const auth = new google.auth.JWT({
	email: GOOGLE_CLIENT_EMAIL,
	key: GOOGLE_PRIVATE_KEY,
	scopes: SCOPES,
})

export const calendar = google.calendar({ version: 'v3', auth })

// –ü—Ä–æ—Å—Ç–∞—è "—Å–µ—Å—Å–∏—è" –≤ –ø–∞–º—è—Ç–∏
export const sessions = new Map<
	string,
	{
		sessionId: string
		startTime?: Date
		name?: string
		phone?: string
		email?: string
		reason?: string
		waitingName?: boolean
		meetingType?: string
		waitingForReasonOfMeeting?: boolean
		waitingForMeetingType?: boolean
		waitingPhone?: boolean
		waitingEmail?: boolean
		completed?: boolean
	}
>()

// --- –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ---
bot.start(async ctx => {
	const userId = String(ctx.from!.id)
	sessions.delete(userId)

	const allEnvIsPresent = await envCheck()
	if (!allEnvIsPresent) {
		ctx.reply(
			`–î–æ–±—Ä–æ–≥–æ –∑–¥–æ—Ä–æ–≤'—è—á–∫–∞! –ù–∞—Ä–∞–∑—ñ —Ü–µ–π –±–æ—Ç –Ω–µ –ø—Ä–∞—Ü—é—î, –∞–ª–µ –Ω–µ —Ö–≤–∏–ª—é–π—Ç–µ—Å—å, —á–µ—Ä–µ–∑ –¥–µ—è–∫–∏–π —á–∞—Å –≤—ñ–Ω –æ–±—ñ—Ü—è—î –∑–∞–ø—Ä–∞—Ü—é–≤–∞—Ç–∏.`,
		)
	} else {
		ctx.reply(
			`–î–æ–±—Ä–æ–≥–æ –∑–¥–æ—Ä–æ–≤'—è—á–∫–∞! üëã –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ /book, –¥–ª—è —Ç–æ–≥–æ, —â–æ–± –∑–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ –∑—É—Å—Ç—Ä—ñ—á.`,
		)
	}
})

bot.command('book', async ctx => {
	const userId = String(ctx.from!.id)
	sessions.delete(userId)

	await ctx.reply('üîÑ –ë—É–¥—å –ª–∞—Å–∫–∞ –∑–∞—á–µ–∫–∞–π—Ç–µ, –π–¥–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –¥–Ω—ñ–≤...')

	try {
		const days = await getAvailableDays(30)
		const sessionId = Math.random().toString(36).substring(2, 10)
		sessions.set(userId, { sessionId })

		const buttons = days.map(d => [
			Markup.button.callback(
				d.toFormat('dd.MM.yyyy'),
				`day_${sessionId}_${d.toISO()}`,
			),
		])

		await ctx.reply(
			'üìÖ –í–∏–±–µ—Ä—ñ—Ç—å –¥–µ–Ω—å –¥–ª—è –∑—É—Å—Ç—Ä—ñ—á—ñ:',
			Markup.inlineKeyboard(buttons),
		)
	} catch (err) {
		console.error('Error during days obtaining:', { err })
		await ctx.reply(
			'‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ –¥–Ω—ñ. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.',
		)
	}
})

// --- –í—ã–±–æ—Ä –¥–Ω—è ---
bot.action(/day_(.+?)_(.+)/, async ctx => {
	const userId = String(ctx.from!.id)
	const session = sessions.get(userId)
	const [clickedSessionId, dayISO] = [ctx.match[1], ctx.match[2]]

	if (!session || session.sessionId !== clickedSessionId || session.completed) {
		return ctx.reply(
			'ü§ñ –ü–æ—Ç–æ—á–Ω–µ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –≤–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∞–±–æ –∑–∞—Å—Ç–∞—Ä—ñ–ª–æ. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /book, —â–æ–± –ø–æ—á–∞—Ç–∏ –∑–∞–Ω–æ–≤–æ.',
		)
	}

	const day = DateTime.fromISO(dayISO).setZone(TIMEZONE)
	const slots = await getAvailableSlotsForDay(day)

	if (slots.length === 0) return ctx.reply('–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —á–∞—Å—ñ–≤ –Ω–∞ —Ü–µ–π –¥–µ–Ω—å.')

	const buttons = slots.map(s => {
		// –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å –≤—Ä–µ–º–µ–Ω–µ–º –∏ –¥–∞—Ç–æ–π
		const label = `${s.start.toFormat('dd.MM.yyyy')} ‚Äî ${s.start.toFormat(
			'HH:mm',
		)}`
		return [
			Markup.button.callback(
				label,
				`slot_${clickedSessionId}_${s.start.toMillis()}`,
			),
		]
	})

	ctx.reply('–í–∏–±–µ—Ä—ñ—Ç—å –∑—Ä—É—á–Ω–∏–π —á–∞—Å:', Markup.inlineKeyboard(buttons))
})

// --- –í—ã–±–æ—Ä —Å–ª–æ—Ç–∞ –∏ –∑–∞–ø—Ä–æ—Å –∏–º–µ–Ω–∏ ---
bot.action(/slot_(.+?)_(\d+)/, async ctx => {
	const userId = String(ctx.from!.id)
	const session = sessions.get(userId)
	const [clickedSessionId, timestampStr] = [ctx.match[1], ctx.match[2]]

	if (!session || session.sessionId !== clickedSessionId || session.completed) {
		return ctx.reply(
			'ü§ñ –ü–æ—Ç–æ—á–Ω–µ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –≤–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∞–±–æ –∑–∞—Å—Ç–∞—Ä—ñ–ª–æ. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /book, —â–æ–± –ø–æ—á–∞—Ç–∏ –∑–∞–Ω–æ–≤–æ.',
		)
	}

	const timestamp = parseInt(timestampStr)
	const startTime = DateTime.fromMillis(timestamp).setZone(TIMEZONE)

	const day = startTime.startOf('day')
	const slots = await getAvailableSlotsForDay(day)
	const slotTaken = !slots.some(s => s.start.toMillis() === timestamp)
	if (slotTaken) {
		return ctx.reply(
			'‚ùå –ù–∞ –∂–∞–ª—å, –≤–∏–±—Ä–∞–Ω–∏–π —á–∞—Å –≤–∂–µ –∑–∞–π–Ω—è—Ç–∏–π. –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —ñ–Ω—à–∏–π —á–∞—Å.',
		)
	}

	// –æ–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º –∏ –∂–¥–µ–º –∏–º—è
	session.startTime = startTime.toJSDate()
	session.waitingName = true
	sessions.set(userId, session)

	await ctx.reply("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è –¥–ª—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è:")
})

// --- –í—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Å—Ç—Ä–µ—á–∏ ---
bot.action(/meeting_(offline|online)/, async ctx => {
	const userId = String(ctx.from!.id)
	const session = sessions.get(userId)
	if (!session || session.completed) {
		return ctx.reply(
			'ü§ñ –ü–æ—Ç–æ—á–Ω–µ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –≤–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /book, —â–æ–± –ø–æ—á–∞—Ç–∏ –∑–∞–Ω–æ–≤–æ.',
		)
	}

	const type = ctx.match[1] // offline –∏–ª–∏ online

	if (!type) {
		ctx.reply('–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –æ–±—Ä–∞—Ç–∏ –æ–¥–∏–Ω –∑ –¥–≤–æ—Ö –∑–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω–∏—Ö –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤')
	}

	session.meetingType = type.split('-')[1]
	session.waitingPhone = true
	sessions.set(userId, session)

	ctx.reply(
		'–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è —Å–≤–æ—ó–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É (—É –æ–¥–Ω–æ–º—É –∑ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö —Ñ–æ—Ä–º–∞—Ç—ñ–≤:\n +0504122905\n, +050-412-29-05\n, +38-050-412-29-05\n, +380504122905)\n\n –∞–±–æ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤—ñ–π –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –±—Ä–æ–Ω—ñ:',
		Markup.keyboard([Markup.button.contactRequest('üì± –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç')])
			.oneTime()
			.resize(),
	)
})

// --- –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ ---
bot.on('contact', ctx => handlePhone(ctx, sessions))

// --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ---
bot.on('text', async ctx => {
	const userId = String(ctx.from!.id)
	const session = sessions.get(userId)

	if (!session) {
		return ctx.reply(
			'ü§ñ –î–ª—è –ø–æ—á–∞—Ç–∫—É –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /book, —â–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –∑—É—Å—Ç—Ä—ñ—á—ñ.',
		)
	}

	if (session.completed) {
		return ctx.reply(
			'ü§ñ –ü–æ—Ç–æ—á–Ω–µ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –≤–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /book, —â–æ–± –ø–æ—á–∞—Ç–∏ –∑–∞–Ω–æ–≤–æ.',
		)
	}

	// –∂–¥–µ–º –∏–º—è
	if (session.waitingName) {
		const name = ctx.message.text.trim()
		if (name.length < 2) {
			return ctx.reply("‚ùå –Ü–º'—è –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–µ. –í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î —ñ–º'—è —â–µ —Ä–∞–∑:")
		}
		session.name = name
		session.waitingName = false
		session.waitingForReasonOfMeeting = true
		sessions.set(userId, session)

		await ctx.reply(
			'–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è —Ç–∏–º —â–æ –≤–∞—Å —Ç—É—Ä–±—É—î, —ñ–∑ —á–∏–º –≤–∏ —Ö–æ—á–µ—Ç–µ –≤–ø–æ—Ä–∞—Ç–∏—Å—å –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –º–æ—î—ó –¥–æ–ø–æ–º–æ–≥–∏:',
		)
		return
	}

	// —Ç—É—Ç –º—ã –∂–¥–µ–º –ø—Ä–∏—á–∏–Ω—É –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –û–ª–µ
	if (session.waitingForReasonOfMeeting) {
		const reason = ctx.message.text.trim()
		if (reason.length < 10) {
			return ctx.reply(
				'‚ùå –û–ø–∏—Å –ø—Ä–æ–±–ª–µ–º–∏ –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π, –æ–ø–∏—à—ñ—Ç—å –±—ñ–ª—å—à –¥–µ—Ç–∞–ª—å–Ω–æ.',
			)
		}
		if (reason.length > 500) {
			return ctx.reply(
				'‚ùå –û–ø–∏—Å –ø—Ä–æ–±–ª–µ–º–∏ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π, —Å–ø—Ä–æ–±—É–π—Ç–µ –æ–ø–∏—Å–∞—Ç–∏ –º–µ–Ω—à –¥–µ—Ç–∞–ª—å–Ω–æ.',
			)
		}
		session.reason = reason
		session.waitingForReasonOfMeeting = false
		sessions.set(userId, session)

		await ctx.reply(
			'–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —Ñ–æ—Ä–º–∞—Ç –∑—É—Å—Ç—Ä—ñ—á—ñ:',
			Markup.inlineKeyboard([
				[
					Markup.button.callback(
						'üè¢ –û—Ñ–ª–∞–π–Ω –≤ –æ—Ñ—ñ—Å—ñ (–∞–¥—Ä–µ—Å–∞ 1 –±—É–¥ 11 –æ—Ñ—ñ—Å 111 –ø–æ–≤–µ—Ä—Ö 1111)',
						`meeting_offline`,
					),
				],
				[Markup.button.callback('üíª –û–Ω–ª–∞–π–Ω (Google Meet)', `meeting_online`)],
			]),
		)
		return
	}

	// –∂–¥–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
	if (session.waitingPhone) {
		const phone = ctx.message.text.trim()
		const validPhonePattern =
			/^\+?(38)?[-\s()]?0\d{2}[-\s()]?\d{3}[-\s()]?\d{2}[-\s()]?\d{2}$/

		if (!validPhonePattern.test(phone)) {
			return ctx.reply(
				'‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä—É.\n\n' +
					'–î–æ–∑–≤–æ–ª–µ–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏:\n' +
					'‚Ä¢ +0504122905\n' +
					'‚Ä¢ +050-412-29-05\n' +
					'‚Ä¢ +38-050-412-29-05\n' +
					'‚Ä¢ +380504122905\n' +
					'‚Ä¢ +38 050 412 29 05\n\n' +
					'–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —É –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ –∞–±–æ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤—ñ–π –∫–æ–Ω—Ç–∞–∫—Ç:',
				Markup.keyboard([Markup.button.contactRequest('üì± –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç')])
					.oneTime()
					.resize(),
			)
		}

		session.phone = phone
		session.waitingPhone = false
		session.waitingEmail = true
		sessions.set(userId, session)
		return ctx.reply('–î—è–∫—É—é! –¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à email –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –±—Ä–æ–Ω—ñ:')
	}

	// –∂–¥–µ–º email
	if (session.waitingEmail) {
		const email = ctx.message.text.trim()
		const validEmailPattern = /^[^\s@]+@[^\s@]+\.[a-zA-Z]{2,}$/

		if (!validEmailPattern.test(email)) {
			return ctx.reply('‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç email. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:')
		}

		session.email = email
		delete session.waitingEmail
		sessions.set(userId, session)

		const start = session.startTime
			? DateTime.fromJSDate(session.startTime, { zone: TIMEZONE })
			: DateTime.local().setZone(TIMEZONE)
		const end = start.plus({ minutes: 60 })

		const event: calendar_v3.Schema$Event = {
			summary: '–ú—ñ—Ç–∏–Ω–≥ —ñ–∑ –ø—Å–∏—Ö–æ–ª–æ–≥–æ–º –û–ª—å–≥–æ—é –ï–Ω–≥–µ–ª—å—Å',
			description: `–ó–∞–±—Ä–æ–Ω—å–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞.\n–î–∞–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∞: ${session.name}\n–¢–µ–ª–µ—Ñ–æ–Ω: ${session.phone}\nEmail: ${session.email}\nüí∞ 
        –û–ø–∏—Å –ø—ñ–¥—Å—Ç–∞–≤–∏ –¥–ª—è –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è: ${session.reason}\n –§o—Ä–º–∞—Ç –∑—É—Å—Ç—Ä—ñ—á—ñ: ${session.meetingType}`,
			start: { dateTime: start.toISO(), timeZone: TIMEZONE },
			end: { dateTime: end.toISO(), timeZone: TIMEZONE },
			conferenceData: { createRequest: { requestId: `tg-${Date.now()}` } },
		}

		try {
			const res = await calendar.events.insert({
				calendarId: CALENDAR_ID,
				requestBody: event,
				conferenceDataVersion: 1,
			})

			await ctx.reply(
				`‚úÖ –ú—ñ—Ç–∏–Ω–≥ –∑–∞–±—Ä–æ–Ω—å–æ–≤–∞–Ω–æ!\n` +
					`üìÖ –î–∞—Ç–∞ —Ç–∞ —á–∞—Å: ${start.toFormat('dd.MM.yyyy HH:mm')}\n` +
					(res.data.hangoutLink
						? `üîó –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ Google Meet: ${res.data.hangoutLink}\n`
						: `‚ÑπÔ∏è –ó–∞–ø—Ä–æ—à–µ–Ω–Ω—è –±—É–¥–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –Ω–∞ –≤–∞—à email.\n`) +
					`üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${session.phone}\n` +
          `–§–æ—Ä–º–∞—Ç –∑—É—Å—Ç—Ä—ñ—á—ñ: ${session.meetingType}` +
					`üë§ –Ü–º'—è: ${session.name}\n` +
					`üìß Email: ${session.email}\n\n` +
					` –û–ø–∏—Å –ø—ñ–¥—Å—Ç–∞–≤–∏ –¥–ª—è –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è: ${session.reason}\n`,
				// + { parse_mode: 'Markdown' },
			)

			session.completed = true
			sessions.set(userId, session)

			await ctx.reply('–î–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /start')
		} catch (err) {
			console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –ø–æ–¥—ñ—ó:', err)
			await ctx.reply(
				'‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—å –∑–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ —á–∞—Å —Ç–∞ –¥–∞—Ç—É. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.',
			)
		}
		return
	}

	return ctx.reply(
		'ü§ñ –í–∏–±–∞—á—Ç–µ, –≤–≤–µ–¥–µ–Ω–∏–π –≤–∞–º–∏ —Ç–µ–∫—Å—Ç –º–µ–Ω—ñ –Ω–µ –∑—Ä–æ–∑—É–º—ñ–ª–∏–π.\n\n' +
			'–î–ª—è –ø–æ—á–∞—Ç–∫—É –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ /book',
	)
})

// --- Webhook handler ---
export async function POST(req: NextRequest) {
	try {
		const body = await req.json()
		await bot.handleUpdate(body)
		return NextResponse.json({ ok: true })
	} catch (err) {
		console.error('Telegram webhook error:', err)
		return NextResponse.json({ error: 'failed' }, { status: 500 })
	}
}

export async function GET() {
	return NextResponse.json({ message: 'bot works' })
}
