import { Telegraf, Markup } from 'telegraf'
import { google, calendar_v3 } from 'googleapis'
import { NextRequest, NextResponse } from 'next/server'
import { DateTime } from 'luxon'
import { message } from 'telegraf/filters'
import { envCheck } from '@/utils/server-utils'

const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN!
const bot = new Telegraf(BOT_TOKEN)

// --- Google Calendar –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ ---
const SCOPES = ['https://www.googleapis.com/auth/calendar']
const CALENDAR_ID = process.env.GOOGLE_CALENDAR_ID!
const GOOGLE_CLIENT_EMAIL = process.env.GOOGLE_CLIENT_EMAIL!
const GOOGLE_PRIVATE_KEY = process.env.GOOGLE_PRIVATE_KEY!.replace(/\\n/g, '\n')
const TIMEZONE = 'Europe/Kiev'

const auth = new google.auth.JWT({
	email: GOOGLE_CLIENT_EMAIL,
	key: GOOGLE_PRIVATE_KEY,
	scopes: SCOPES,
})

const calendar = google.calendar({ version: 'v3', auth })

// –ü—Ä–æ—Å—Ç–∞—è "—Å–µ—Å—Å–∏—è" –≤ –ø–∞–º—è—Ç–∏
const sessions = new Map<
	string,
	{
		startTime?: Date
		phone?: string
		name?: string
		email?: string
		waitingEmail?: boolean
	}
>()

// --- –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–Ω–µ–π ---
async function getAvailableDays(daysAhead = 30, minDays = 10) {
	const now = DateTime.now().setZone(TIMEZONE)
	const availableDays: DateTime[] = []

	for (let i = 1; i <= daysAhead; i++) {
		const day = now.plus({ days: i })
		const weekday = day.weekday // 1 = Monday, 7 = Sunday
		if (weekday === 6 || weekday === 7) continue // –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—É–±–±–æ—Ç—É –∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ

		const slots = await getAvailableSlotsForDay(day)

		if (slots.length > 0 || availableDays.length < minDays) {
			availableDays.push(day)
		}

		if (availableDays.length >= minDays) break
	}

	return availableDays
}

// --- –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–æ—Ç–æ–≤ ---
async function getAvailableSlotsForDay(day: DateTime) {
	const slots: { start: DateTime; label: string }[] = []
	const startHour = 11
	const endHour = 19
	const meetingDuration = 60 // –º–∏–Ω
	const breakAfterMeeting = 30 // –º–∏–Ω
	const maxMeetingsPerDay = 5

	let slotStart = day.set({
		hour: startHour,
		minute: 0,
		second: 0,
		millisecond: 0,
	})
	let slotCount = 0 // —É—á–∏—Ç—ã–≤–∞–µ–º –≤—Å–µ —Å–ª–æ—Ç—ã, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç

	while (slotCount < maxMeetingsPerDay) {
		const slotEnd = slotStart.plus({ minutes: meetingDuration })

		const res = await calendar.events.list({
			// @ts-expect-error types error
			calendarId: CALENDAR_ID,
			timeMin: slotStart.toISO(),
			timeMax: slotEnd.toISO(),
			singleEvents: true,
		})

		// @ts-expect-error type error
		const events = res.data.items || []

		if (events.length === 0) {
			slots.push({
				start: slotStart,
				label: slotStart.toFormat('HH:mm'),
			})
		}

		slotCount++ // —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ **–≤—Å–µ–≥–¥–∞**, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ —Å–ª–æ—Ç–∞
		slotStart = slotEnd.plus({ minutes: breakAfterMeeting })

		if (slotStart.hour >= endHour) break
	}

	return slots
}

// --- —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞ ---
function handlePhone(ctx: any) {
	const userId = String(ctx.from!.id)
	const session = sessions.get(userId)
	if (!session || !session.startTime) {
		return ctx.reply('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –∏ –≤—Ä–µ–º—è –≤—Å—Ç—Ä–µ—á–∏ —á–µ—Ä–µ–∑ /book.')
	}

	const contact = ctx.message.contact
	if (contact?.phone_number) {
		session.phone = contact.phone_number
		session.name =
			contact.first_name + (contact.last_name ? ' ' + contact.last_name : '')
		session.waitingEmail = true
		sessions.set(userId, session)
		ctx.reply('–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±—Ä–æ–Ω–∏:')
	}
}

// tell phone number check
function isValidPhone(phone: string) {
  // —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
  const cleaned = phone.replace(/[\s-]/g, '');

  // –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ü–∏—Ñ—Ä—ã –∏ –º–∞–∫—Å–∏–º—É–º –æ–¥–∏–Ω +
  if (/[^+\d]/.test(cleaned)) return false; // –µ—Å—Ç—å –±—É–∫–≤—ã –∏–ª–∏ –¥—Ä—É–≥–∏–µ —Å–∏–º–≤–æ–ª—ã
  if ((cleaned.match(/\+/g) || []).length > 1) return false; // –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ +
  if (!/^\+?\d{9,15}$/.test(cleaned)) return false; // –¥–ª–∏–Ω–∞ –Ω–æ–º–µ—Ä–∞
  return true;
}

// --- –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ---
bot.start(async ctx => {
  const allEnvIsPresent = await envCheck()
  console.log({allEnvIsPresent})
  if(!allEnvIsPresent) {
    ctx.reply(`–î–æ–±—Ä–æ–≥–æ –∑–¥–æ—Ä–æ–≤'—è—á–∫–∞! –ù–∞—Ä–∞–∑—ñ —Ü–µ–π –±–æ—Ç –Ω–µ –ø—Ä–∞—Ü—é—î, –∞–ª–µ –Ω–µ —Ö–≤–∏–ª—é–π—Ç–µ—Å—å, —á–µ—Ä–µ–∑ –¥–µ—è–∫–∏–π —á–∞—Å –≤—ñ–Ω –æ–±—ñ—Ü—è—î –∑–∞–ø—Ä–∞—Ü—é–≤–∞—Ç–∏.`)
  } else {
    ctx.reply(`–î–æ–±—Ä–æ–≥–æ –∑–¥–æ—Ä–æ–≤'—è—á–∫–∞! üëã –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ /book, –¥–ª—è —Ç–æ–≥–æ, —â–æ–± –∑–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ –∑—É—Å—Ç—Ä—ñ—á.`)
  }
})

bot.command('book', async ctx => {
	const days = await getAvailableDays(30)
	const buttons = days.map(d => [
		Markup.button.callback(d.toFormat('dd.MM.yyyy'), `day_${d.toISO()}`),
	])
	ctx.reply('–í–∏–±–µ—Ä—ñ—Ç—å –¥–µ–Ω—å –¥–ª—è –∑—É—Å—Ç—Ä—ñ—á—ñ:', Markup.inlineKeyboard(buttons))
})

// --- –í—ã–±–æ—Ä –¥–Ω—è ---
bot.action(/day_(.+)/, async ctx => {
	const day = DateTime.fromISO(ctx.match[1]).setZone(TIMEZONE)
	const slots = await getAvailableSlotsForDay(day)

	if (slots.length === 0) return ctx.reply('–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —á–∞—Å—ñ–≤ –Ω–∞ —Ü–µ–π –¥–µ–Ω—å.')

	const buttons = slots.map(s => [
		Markup.button.callback(s.label, `slot_${s.start.toMillis()}`),
	])

	ctx.reply('–í–∏–±–µ—Ä—ñ—Ç—å –∑—Ä—É—á–Ω–∏–π —á–∞—Å:', Markup.inlineKeyboard(buttons))
})

// --- –í—ã–±–æ—Ä —Å–ª–æ—Ç–∞ –∏ –∑–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç–∞–∫—Ç–∞ ---
bot.action(/slot_(\d+)/, ctx => {
	const timestamp = parseInt(ctx.match[1])
	const startTime = DateTime.fromMillis(timestamp).toJSDate() // —Å–æ—Ö—Ä–∞–Ω—è–µ–º JS Date
	sessions.set(String(ctx.from!.id), { startTime })

	ctx.reply(
		'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±—Ä–æ–Ω–∏:',
		Markup.keyboard([Markup.button.contactRequest('üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç')])
			.oneTime()
			.resize(),
	)
})

// --- –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ ---
bot.on('contact', handlePhone)

bot.on('text', async (ctx) => {
  const userId = String(ctx.from!.id);
  const session = sessions.get(userId);

  if (!session || !session.startTime) return;

  // –µ—Å–ª–∏ –∂–¥–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω, –∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª —Ç–µ–∫—Å—Ç
  if (!session.phone) {
    const phone = ctx.message.text.trim();
    if (!isValidPhone(phone)) {
      return ctx.reply(
        '‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä—É.\n' +
        '–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –≤ –æ–¥–Ω–æ–º—É —ñ–∑ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö —Ñ–æ—Ä–º–∞—Ç—ñ–≤:\n' +
        '+0504122905, 0504122905, +050-412-29-05, 050-412-29-05'
      );
    }

    session.phone = phone;
    session.waitingEmail = true;
    sessions.set(userId, session);

    return ctx.reply('–î—è–∫—É—é! –¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à email –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –±—Ä–æ–Ω—ñ:');
  }

  // –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω –∏ –∂–¥—ë–º email
  if (session.waitingEmail) {
    const email = ctx.message.text.trim();
    if (!/^[\w.-]+@[\w.-]+\.\w+$/.test(email)) {
      return ctx.reply('‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç email. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:');
    }

    session.email = email;
    delete session.waitingEmail;
    sessions.set(userId, session);

		// —Å–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ Google Calendar
		const start = DateTime.fromJSDate(session.startTime, { zone: TIMEZONE })
		const end = start.plus({ minutes: 60 })
    const event: calendar_v3.Schema$Event = {
      summary: '–ú—ñ—Ç–∏–Ω–≥ —ñ–∑ –ø—Å–∏—Ö–æ–ª–æ–≥–æ–º –û–ª—å–≥–æ—é –ú–æ–ª–æ–¥—á–∏–Ω–∫–æ—é',
      description: `–ó–∞–±—Ä–æ–Ω—å–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞.\n–î–∞–Ω –∫–ª—ñ—î–Ω—Ç–∞: ${
        session.name || '‚Äî'
      }\n–¢–µ–ª–µ—Ñ–æ–Ω: ${session.phone}\nEmail: ${
        session.email
      }\nüí∞ –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó: –Ω–µ –æ–ø–ª–∞—á–µ–Ω–æ`,
      start: { dateTime: start.toISO(), timeZone: TIMEZONE },
      end: { dateTime: end.toISO(), timeZone: TIMEZONE },
      conferenceData: { createRequest: { requestId: `tg-${Date.now()}` } },
    }

    try {
      const res = await fetch(process.env.BASIC_URL + '/api/mono-form-link')
      console.log({res})
    } catch(err: unknown) {
      throw Error(`Invoice creation error:', ${err instanceof Error ? err.message : err}`)
    }

		try {
			const res = await calendar.events.insert({
				calendarId: CALENDAR_ID,
				requestBody: event,
				conferenceDataVersion: 1,
			})

			const paymentLink = 'https://send.monobank.ua/jar/XXXXXXXXX'
			const amount = 800

			await ctx.reply(
				`‚úÖ –ú—ñ—Ç–∏–Ω–≥ –∑–∞–±—Ä–æ–Ω—å–æ–≤–∞–Ω–æ!\n` +
					`üìÖ –î–∞—Ç–∞ —Ç–∞ —á–∞—Å: ${start.toFormat('dd.MM.yyyy HH:mm')}\n` +
					(res.data.hangoutLink
						? `üîó –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ Google Meet: ${res.data.hangoutLink}\n`
						: `‚ÑπÔ∏è –ó–∞–ø—Ä–æ—à–µ–Ω–Ω—è –±—É–¥–µ –≤–∞–º –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ —Ç—Ä–æ—Ö–∏ –∑–≥–æ–¥–æ–º –Ω–∞ –≤–∫–∞–∑–∞–Ω–∏–π –≤–∞–º–∏ email.\n`) +
					`üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${session.phone}\n` +
					`üë§ –Ü–º'—è: ${session.name || '‚Äî'}\n` +
					`üìß Email: ${session.email}\n\n` +
					`üí∞ –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç–∏: ‚ùå –Ω–µ –æ–ø–ª–∞—á–µ–Ω–æ\n` +
					`–°—É–º–∞: ${amount} –≥—Ä–Ω\n` +
					`üëâ –î–ª—è –æ–ø–ª–∞—Ç–∏ –ø–µ—Ä–µ–π–¥—ñ—Ç—å –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º(${paymentLink}). –î–∞–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–µ –Ω–∞ –ø—Ä–æ—Ç—è–∑—ñ 24 –≥–æ–¥–∏–Ω. –û–ø–ª–∞—Ç–∏, –Ω–µ —Ç–æ –Ω–∞–∫—Ä–µ–ø –Ω–∞—à–ª—é!!!`,
				{ parse_mode: 'Markdown' },
			)

			sessions.delete(userId)
		} catch (err) {
			console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –ø–æ–¥—ñ—ó:', err)
			await ctx.reply('‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—å –∑–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ —á–∞—Å —Ç–∞ –¥–∞—Ç—É. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.')
		}
	}
})

// --- Webhook handler ---
export async function POST(req: NextRequest) {
	try {
		const body = await req.json()
		await bot.handleUpdate(body)
		return NextResponse.json({ ok: true })
	} catch (err) {
		console.error('Telegram webhook error:', err)
		return NextResponse.json({ error: 'failed' }, { status: 500 })
	}
}

export async function GET() {
  return NextResponse.json({ message: 'bot works' })
}