import { Telegraf, Markup } from "telegraf"
import { google } from "googleapis"
import { NextRequest, NextResponse } from 'next/server'
import { DateTime } from 'luxon'

const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN!
const bot = new Telegraf(BOT_TOKEN)

// --- Google Calendar –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ ---
const SCOPES = ["https://www.googleapis.com/auth/calendar"] // üî• –£–ë–†–ê–õ –õ–ò–®–ù–ò–ô –ü–†–û–ë–ï–õ!
const CALENDAR_ID = process.env.GOOGLE_CALENDAR_ID!
// const OWNER_EMAIL = process.env.OWNER_EMAIL!

// –ë–µ—Ä—ë–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–∑ env
const GOOGLE_CLIENT_EMAIL = process.env.GOOGLE_CLIENT_EMAIL!
const GOOGLE_PRIVATE_KEY = process.env.GOOGLE_PRIVATE_KEY!.replace(/\\n/g, "\n")
const TIMEZONE = "Europe/Kiev"

const auth = new google.auth.JWT({
  email: GOOGLE_CLIENT_EMAIL,
  key: GOOGLE_PRIVATE_KEY,
  scopes: SCOPES,
})
const calendar = google.calendar({ version: "v3", auth })

// –ü—Ä–æ—Å—Ç–∞—è "—Å–µ—Å—Å–∏—è" –≤ –ø–∞–º—è—Ç–∏ (–¥–ª—è demo; –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ ‚Äî Redis –∏–ª–∏ –ë–î)
const sessions = new Map<string, { startTime?: Date }>()

// --- –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–Ω–µ–π —Å –ø—Ä–æ–ø—É—Å–∫–æ–º –≤—ã—Ö–æ–¥–Ω—ã—Ö ---
async function getAvailableDays(daysAhead = 7) {
  const now = new Date()
  const availableDays: Date[] = []

  for (let i = 1; i <= daysAhead; i++) {
    const day = new Date(now)
    day.setDate(now.getDate() + i)

    // –ï—Å–ª–∏ –¥–µ–Ω—å —Å—É–±–±–æ—Ç–∞ –∏–ª–∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, —Å–¥–≤–∏–≥–∞–µ–º –Ω–∞ +2 –¥–Ω—è
    const dayOfWeek = day.getDay() // 0 - –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, 6 - —Å—É–±–±–æ—Ç–∞
    if (dayOfWeek === 0 || dayOfWeek === 6) {
      continue
    }

    const slots = await getAvailableSlotsForDay(day)
    if (slots.length > 0) availableDays.push(day)
  }

  return availableDays
}

// --- –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ ---
async function getAvailableSlotsForDay(day: Date) {
  const slots: { start: Date; label: string }[] = []
  const startHour = 9
  const endHour = 18
  const step = 90 // –º–∏–Ω—É—Ç

  for (let h = startHour; h < endHour; h++) {
    for (let m = 0; m < 60; m += step) {
      const slotStart = new Date(day)
      slotStart.setHours(h, m, 0, 0)
      const slotEnd = new Date(slotStart.getTime() + step * 60 * 1000)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º Google Calendar –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–æ–±—ã—Ç–∏–π
      const events = await calendar.events.list({
        calendarId: CALENDAR_ID!,
        timeMin: slotStart.toISOString(),
        timeMax: slotEnd.toISOString(),
        singleEvents: true,
      })

      if (!events.data.items || events.data.items.length === 0) {
        slots.push({
          start: slotStart,
          label: slotStart.toLocaleTimeString("ru-RU", { hour: "2-digit", minute: "2-digit" }),
        })
      }
    }
  }

  return slots
}

bot.start((ctx) => {
  ctx.reply("–ü—Ä–∏–≤–µ—Ç! üëã –ù–∞–ø–∏—à–∏ /book, —á—Ç–æ–±—ã –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Å—Ç—Ä–µ—á—É.")
})

bot.command("book", async (ctx) => {
  const days = await getAvailableDays(7)
  const buttons = days.map(d => [Markup.button.callback(
    d.toLocaleDateString("ru-RU"),
    `day_${d.toISOString()}`
  )])
  ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏:", Markup.inlineKeyboard(buttons))
})

bot.action(/day_(.+)/, async (ctx) => {
  const day = new Date(ctx.match[1])
  const slots = await getAvailableSlotsForDay(day)
  if (slots.length === 0) return ctx.reply("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å.")

  const buttons = slots.map(s => [Markup.button.callback(s.label, `slot_${s.start.getTime()}`)])
  ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:", Markup.inlineKeyboard(buttons))
})

bot.action(/slot_(\d+)/, (ctx) => {
  const timestamp = parseInt(ctx.match[1])
  const startTime = new Date(timestamp)
  sessions.set(String(ctx.from!.id), { startTime })
  ctx.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±—Ä–æ–Ω–∏:")
})

bot.action(/select_(\d+)/, (ctx) => {
  const timestamp = parseInt(ctx.match[1])
  const startTime = new Date(timestamp)

  sessions.set(String(ctx.from!.id), { startTime })

  ctx.replyWithMarkdown(
    `–í—ã –≤—ã–±—Ä–∞–ª–∏: *${startTime.toLocaleString("ru-RU")}*\n\n` +
    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:"
  )
})

bot.on("text", async (ctx) => {
  const userId = String(ctx.from!.id)
  const session = sessions.get(userId)
  if (!session || !session.startTime) return

  const email = ctx.message.text.trim()
  if (!/^[\w.-]+@[\w.-]+\.\w+$/.test(email)) {
    return ctx.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
  }

  const start = DateTime.fromJSDate(session.startTime).setZone(TIMEZONE)
  const end = start.plus({ minutes: 60 })

  try {
    const event = {
      summary: "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è",
      description: `–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ Telegram-–±–æ—Ç–∞.\nEmail –∫–ª–∏–µ–Ω—Ç–∞: ${email}`,
      start: {
        dateTime: start.toISO({ suppressMilliseconds: true }),
        timeZone: TIMEZONE, // üî• –£–ö–ê–ñ–ò–¢–ï –°–í–û–ô –ß–ê–°–û–í–û–ô –ü–û–Ø–°!
      },
      end: {
        dateTime: end.toISO({ suppressMilliseconds: true }),
        timeZone: TIMEZONE,
      },
      // attendees: [ // only for business accounts in google
      //   { email: OWNER_EMAIL! },
      //   { email },
      // ],
      conferenceData: {
        createRequest: { requestId: `tg-${Date.now()}` },
      },
    }

    const response = await calendar.events.insert({
      calendarId: CALENDAR_ID!,
      requestBody: event,
      conferenceDataVersion: 1,
    })

    await ctx.reply(
      `‚úÖ –í—Å—Ç—Ä–µ—á–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞!\n\n` +
      `üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: ${session.startTime.toLocaleString("ru-RU")}\n` +
      (response.data.hangoutLink
        ? `üîó –°—Å—ã–ª–∫–∞ –Ω–∞ Google Meet: ${response.data.hangoutLink}\n`
        : `‚ÑπÔ∏è –°—Å—ã–ª–∫–∞ –ø–æ—è–≤–∏—Ç—Å—è –≤ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏.\n`) +
      `üìß –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ ${email}.`
    )

    sessions.delete(userId)
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è:", err)
    await ctx.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Å—Ç—Ä–µ—á—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
  }
})

// Webhook handler
export async function POST(req: NextRequest) {
  try {
    const body = await req.json()
    await bot.handleUpdate(body)
    return NextResponse.json({ ok: true })
  } catch (err) {
    console.error("Telegram webhook error:", err)
    return NextResponse.json({ error: "failed" }, { status: 500 })
  }
}