import { Telegraf, Markup } from 'telegraf'
import { google, calendar_v3 } from 'googleapis'
import { NextRequest, NextResponse } from 'next/server'
import { DateTime } from 'luxon'
import { envCheck } from '@/utils/server-utils'
import { createNewInvoiceLink } from '@/actions/server-actions'
import { TIMEZONE, SCOPES, invoiceCheckUrl } from '@/lib/vars'
import {
	getAvailableDays,
	getAvailableSlotsForDay,
	handlePhone,
	isValidPhone,
} from '@/lib/helpers'

const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN!
const bot = new Telegraf(BOT_TOKEN)

// --- Google Calendar –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ ---
const CALENDAR_ID = process.env.GOOGLE_CALENDAR_ID!
const GOOGLE_CLIENT_EMAIL = process.env.GOOGLE_CLIENT_EMAIL!
const GOOGLE_PRIVATE_KEY = process.env.GOOGLE_PRIVATE_KEY!.replace(/\\n/g, '\n')

const auth = new google.auth.JWT({
	email: GOOGLE_CLIENT_EMAIL,
	key: GOOGLE_PRIVATE_KEY,
	scopes: SCOPES,
})

export const calendar = google.calendar({ version: 'v3', auth })

// –ü—Ä–æ—Å—Ç–∞—è "—Å–µ—Å—Å–∏—è" –≤ –ø–∞–º—è—Ç–∏
export const sessions = new Map<
	string,
	{
		startTime?: Date
		phone?: string
		name?: string
		email?: string
		waitingEmail?: boolean
	}
>()

// --- –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ---
bot.start(async ctx => {
	const allEnvIsPresent = await envCheck()
	if (!allEnvIsPresent) {
		ctx.reply(
			`–î–æ–±—Ä–æ–≥–æ –∑–¥–æ—Ä–æ–≤'—è—á–∫–∞! –ù–∞—Ä–∞–∑—ñ —Ü–µ–π –±–æ—Ç –Ω–µ –ø—Ä–∞—Ü—é—î, –∞–ª–µ –Ω–µ —Ö–≤–∏–ª—é–π—Ç–µ—Å—å, —á–µ—Ä–µ–∑ –¥–µ—è–∫–∏–π —á–∞—Å –≤—ñ–Ω –æ–±—ñ—Ü—è—î –∑–∞–ø—Ä–∞—Ü—é–≤–∞—Ç–∏.`,
		)
	} else {
		ctx.reply(
			`–î–æ–±—Ä–æ–≥–æ –∑–¥–æ—Ä–æ–≤'—è—á–∫–∞! üëã –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ /book, –¥–ª—è —Ç–æ–≥–æ, —â–æ–± –∑–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ –∑—É—Å—Ç—Ä—ñ—á.`,
		)
	}
})

bot.command('book', async ctx => {
	const days = await getAvailableDays(30)
	const buttons = days.map(d => [
		Markup.button.callback(d.toFormat('dd.MM.yyyy'), `day_${d.toISO()}`),
	])
	ctx.reply('–í–∏–±–µ—Ä—ñ—Ç—å –¥–µ–Ω—å –¥–ª—è –∑—É—Å—Ç—Ä—ñ—á—ñ:', Markup.inlineKeyboard(buttons))
})

// --- –í—ã–±–æ—Ä –¥–Ω—è ---
bot.action(/day_(.+)/, async ctx => {
	const day = DateTime.fromISO(ctx.match[1]).setZone(TIMEZONE)
	const slots = await getAvailableSlotsForDay(day)

	if (slots.length === 0) return ctx.reply('–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —á–∞—Å—ñ–≤ –Ω–∞ —Ü–µ–π –¥–µ–Ω—å.')

	const buttons = slots.map(s => [
		Markup.button.callback(s.label, `slot_${s.start.toMillis()}`),
	])

	ctx.reply('–í–∏–±–µ—Ä—ñ—Ç—å –∑—Ä—É—á–Ω–∏–π —á–∞—Å:', Markup.inlineKeyboard(buttons))
})

// --- –í—ã–±–æ—Ä —Å–ª–æ—Ç–∞ –∏ –∑–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç–∞–∫—Ç–∞ ---
bot.action(/slot_(\d+)/, ctx => {
	const timestamp = parseInt(ctx.match[1])
	const startTime = DateTime.fromMillis(timestamp).toJSDate() // —Å–æ—Ö—Ä–∞–Ω—è–µ–º JS Date
	sessions.set(String(ctx.from!.id), { startTime })

	ctx.reply(
		'–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è —Å–≤–æ—ó–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É (—É –æ–¥–Ω–æ–º—É –∑ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö —Ñ–æ—Ä–º–∞—Ç—ñ–≤:\n +0504122905, +050-412-29-05, +38-050-412-29-05, +380504122905\n ) –∞–±–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–º –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –±—Ä–æ–Ω—ñ:',
		Markup.keyboard([Markup.button.contactRequest('üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç')])
			.oneTime()
			.resize(),
	)
})

// --- –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ ---
bot.on('contact', handlePhone)

bot.on('text', async ctx => {
	const userId = String(ctx.from!.id)
	const session = sessions.get(userId)

	if (!session || !session.startTime)
		return ctx.reply(
			'ü§ñ –í–∏–±–∞—á—Ç–µ, –≤–≤–µ–¥–µ–Ω–∏–π –≤–∞–º–∏ —Ç–µ–∫—Å—Ç –º–µ–Ω—ñ –Ω–µ –∑—Ä–æ–∑—É–º—ñ–ª–∏–π.\n\n' +
				'–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ /book –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É /book –≤—Ä—É—á–Ω—É, —â–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –∑—É—Å—Ç—Ä—ñ—á—ñ.',
		)

	if (!session.startTime) return

	// –µ—Å–ª–∏ –∂–¥–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω, –∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª —Ç–µ–∫—Å—Ç
	if (!session.phone) {
		const phone = ctx.message.text.trim()

		// –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ —Ñ–æ—Ä–º–∞—Ç—ã:
		// +0504122905
		// +050-412-29-05
		// +38-050-412-29-05
		// +380504122905
		const validPhonePattern =
			/^(\+050\d{7,8}|\+050-\d{3}-\d{2}-\d{2}|\+38-050-\d{3}-\d{2}-\d{2}|\+38050\d{7,8})$/

		if (!validPhonePattern.test(phone)) {
			return ctx.reply(
				'‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä—É.\n\n' +
					'–î–æ–∑–≤–æ–ª–µ–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏:\n' +
					'‚Ä¢ +0504122905\n' +
					'‚Ä¢ +050-412-29-05\n' +
					'‚Ä¢ +38-050-412-29-05\n' +
					'‚Ä¢ +380504122905\n' +
          '‚Ä¢ 38 050 412 29 05\n' +
          '‚Ä¢ +38 050 412 29 05\n\n' +
					'–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —É –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ.',
			)
		}

		session.phone = phone
		session.waitingEmail = true
		sessions.set(userId, session)

		return ctx.reply('–î—è–∫—É—é! –¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à email –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –±—Ä–æ–Ω—ñ:')
	}

	// –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω –∏ –∂–¥—ë–º email
	if (session.waitingEmail) {
		const email = ctx.message.text.trim()
		if (!/^[\w.-]+@[\w.-]+\.\w+$/.test(email)) {
			return ctx.reply('‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç email. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:')
		}

		session.email = email
		delete session.waitingEmail
		sessions.set(userId, session)

		const invoiceData = await createNewInvoiceLink()

		if (!invoiceData) {
			await ctx.reply(
				'–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∑—É—Å—Ç—Ä—ñ—á—ñ. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ',
			)
		}

		// —Å–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ Google Calendar
		const start = DateTime.fromJSDate(session.startTime, { zone: TIMEZONE })
		const end = start.plus({ minutes: 60 })
		const event: calendar_v3.Schema$Event = {
			summary: '–ú—ñ—Ç–∏–Ω–≥ —ñ–∑ –ø—Å–∏—Ö–æ–ª–æ–≥–æ–º –û–ª—å–≥–æ—é –ï–Ω–≥–µ–ª—å—Å',
			description: `–ó–∞–±—Ä–æ–Ω—å–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞.\n–î–∞–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∞: ${
				session.name || '‚Äî'
			}\n–¢–µ–ª–µ—Ñ–æ–Ω: ${session.phone}\nEmail: ${
				session.email
			}\nüí∞ –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó: –Ω–µ –æ–ø–ª–∞—á–µ–Ω–æ\n
        –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —ñ–Ω–≤–æ–π—Å: ${invoiceData?.pageUrl}, \n
        –∞–π–¥—ñ—à–Ω–∏–∫ —ñ–Ω–≤–æ–π—Å—É: ${invoiceData?.invoiceId},
        –ø–æ—Å–∏–ª–∞–Ω–Ω—è, –¥–µ –º–æ–∂–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –æ–ø–ª–∞—á–µ–Ω–∏–π —ñ–Ω–≤–æ–π—Å: ${
					process.env.BASIC_URL +
					invoiceCheckUrl +
					`?invoiceId=${invoiceData?.invoiceId}`
				}
      `,
			start: { dateTime: start.toISO(), timeZone: TIMEZONE },
			end: { dateTime: end.toISO(), timeZone: TIMEZONE },
			conferenceData: { createRequest: { requestId: `tg-${Date.now()}` } },
		}

		try {
			const res = await calendar.events.insert({
				calendarId: CALENDAR_ID,
				requestBody: event,
				conferenceDataVersion: 1,
			})

			const paymentLink = invoiceData?.pageUrl
			const amount = 800

			await ctx.reply(
				`‚úÖ –ú—ñ—Ç–∏–Ω–≥ –∑–∞–±—Ä–æ–Ω—å–æ–≤–∞–Ω–æ!\n` +
					`üìÖ –î–∞—Ç–∞ —Ç–∞ —á–∞—Å: ${start.toFormat('dd.MM.yyyy HH:mm')}\n` +
					(res.data.hangoutLink
						? `üîó –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ Google Meet: ${res.data.hangoutLink}\n`
						: `‚ÑπÔ∏è –ó–∞–ø—Ä–æ—à–µ–Ω–Ω—è –±—É–¥–µ –≤–∞–º –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ —Ç—Ä–æ—Ö–∏ –∑–≥–æ–¥–æ–º –Ω–∞ –≤–∫–∞–∑–∞–Ω–∏–π –≤–∞–º–∏ email.\n`) +
					`üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${session.phone}\n` +
					`üë§ –Ü–º'—è: ${session.name || '‚Äî'}\n` +
					`üìß Email: ${session.email}\n\n` +
					`üí∞ –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç–∏: ‚ùå –Ω–µ –æ–ø–ª–∞—á–µ–Ω–æ\n` +
					`–°—É–º–∞: ${amount} –≥—Ä–Ω\n` +
					`üëâ –î–ª—è –æ–ø–ª–∞—Ç–∏ –ø–µ—Ä–µ–π–¥—ñ—Ç—å –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º(${paymentLink}). –î–∞–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–µ –Ω–∞ –ø—Ä–æ—Ç—è–∑—ñ 24 –≥–æ–¥–∏–Ω. –û–ø–ª–∞—Ç–∏, –Ω–µ —Ç–æ –ø–æ–Ω–æ—Å –Ω–∞—à–ª—é!!!`,
				{ parse_mode: 'Markdown' },
			)

			sessions.delete(userId)
		} catch (err) {
			console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –ø–æ–¥—ñ—ó:', err)
			await ctx.reply(
				'‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—å –∑–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ —á–∞—Å —Ç–∞ –¥–∞—Ç—É. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.',
			)
		}
	}
})

// --- Webhook handler ---
export async function POST(req: NextRequest) {
	try {
		const body = await req.json()
		await bot.handleUpdate(body)
		return NextResponse.json({ ok: true })
	} catch (err) {
		console.error('Telegram webhook error:', err)
		return NextResponse.json({ error: 'failed' }, { status: 500 })
	}
}

export async function GET() {
	return NextResponse.json({ message: 'bot works' })
}
