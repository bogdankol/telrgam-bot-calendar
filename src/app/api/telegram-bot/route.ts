import { Telegraf, Markup } from "telegraf"
import { google } from "googleapis"
import { NextRequest, NextResponse } from 'next/server'
import { DateTime } from 'luxon'

const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN!
const bot = new Telegraf(BOT_TOKEN)

// --- Google Calendar –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ ---
const SCOPES = ["https://www.googleapis.com/auth/calendar"]
const CALENDAR_ID = process.env.GOOGLE_CALENDAR_ID!
const GOOGLE_CLIENT_EMAIL = process.env.GOOGLE_CLIENT_EMAIL!
const GOOGLE_PRIVATE_KEY = process.env.GOOGLE_PRIVATE_KEY!.replace(/\\n/g, "\n")
const TIMEZONE = "Europe/Kiev"

const auth = new google.auth.JWT({
  email: GOOGLE_CLIENT_EMAIL,
  key: GOOGLE_PRIVATE_KEY,
  scopes: SCOPES,
})
const calendar = google.calendar({ version: "v3", auth })

// –ü—Ä–æ—Å—Ç–∞—è —Å–µ—Å—Å–∏—è –≤ –ø–∞–º—è—Ç–∏
const sessions = new Map<string, { startTime?: Date }>()

// --- –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞ ---
async function getAvailableSlotsForDay(day: Date) {
  const slots: { start: Date; label: string }[] = []
  const startHour = 11
  const endHour = 19
  const meetingDuration = 60
  const breakAfterMeeting = 30
  const maxMeetingsPerDay = 5

  let meetingsCount = 0
  let slotStart = new Date(day)
  slotStart.setHours(startHour, 0, 0, 0)

  while (slotStart.getHours() < endHour && meetingsCount < maxMeetingsPerDay) {
    const slotEnd = new Date(slotStart.getTime() + meetingDuration * 60 * 1000)

    const events = await calendar.events.list({
      calendarId: CALENDAR_ID!,
      timeMin: slotStart.toISOString(),
      timeMax: slotEnd.toISOString(),
      singleEvents: true,
    })

    if (!events.data.items || events.data.items.length === 0) {
      slots.push({
        start: new Date(slotStart),
        label: slotStart.toLocaleTimeString("ru-RU", { hour: "2-digit", minute: "2-digit" }),
      })
      meetingsCount++
      slotStart = new Date(slotEnd.getTime() + breakAfterMeeting * 60 * 1000)
    } else {
      slotStart = new Date(slotStart.getTime() + 30 * 60 * 1000)
    }
  }

  return slots
}

// --- –ë–æ—Ç ---
bot.start((ctx) => {
  ctx.reply("–ü—Ä–∏–≤–µ—Ç! üëã –ù–∞–ø–∏—à–∏ /book, —á—Ç–æ–±—ã –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Å—Ç—Ä–µ—á—É.")
})

bot.command("book", async (ctx) => {
  const now = new Date()
  const slots = await getAvailableSlotsForDay(now) // –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –±–µ—Ä–µ–º –æ–¥–∏–Ω –¥–µ–Ω—å
  if (slots.length === 0) return ctx.reply("–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.")

  const buttons = slots.map(s => [Markup.button.callback(s.label, `slot_${s.start.getTime()}`)])
  ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:", Markup.inlineKeyboard(buttons))
})

// --- –í—ã–±–æ—Ä —Å–ª–æ—Ç–∞ ---
bot.action(/slot_(\d+)/, (ctx) => {
  const timestamp = parseInt(ctx.match[1])
  const startTime = new Date(timestamp)
  sessions.set(String(ctx.from!.id), { startTime })

  // --- –ó–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç–∞–∫—Ç–∞ —á–µ—Ä–µ–∑ Telegram ---
  ctx.reply(
    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±—Ä–æ–Ω–∏:",
    Markup.keyboard([Markup.button.contactRequest("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç")])
      .oneTime()
      .resize()
  )
})

// --- –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
bot.on("contact", async (ctx) => {
  const userId = String(ctx.from!.id)
  const session = sessions.get(userId)
  if (!session || !session.startTime) return

  const contact = ctx.message.contact
  const phone = contact.phone_number
  const name = contact.first_name + (contact.last_name ? " " + contact.last_name : "")

  const start = DateTime.fromJSDate(session.startTime).setZone(TIMEZONE)
  const end = start.plus({ minutes: 60 })

  try {
    // --- –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ Google Calendar ---
    const event = {
      summary: "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è",
      description: `–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ Telegram-–±–æ—Ç–∞.\n–ö–ª–∏–µ–Ω—Ç: ${name}\n–¢–µ–ª–µ—Ñ–æ–Ω: ${phone}`,
      start: { dateTime: start.toISO({ suppressMilliseconds: true }), timeZone: TIMEZONE },
      end: { dateTime: end.toISO({ suppressMilliseconds: true }), timeZone: TIMEZONE },
      conferenceData: { createRequest: { requestId: `tg-${Date.now()}` } },
    }

    const response = await calendar.events.insert({
      calendarId: CALENDAR_ID!,
      requestBody: event,
      conferenceDataVersion: 1,
    })

    await ctx.reply(
      `‚úÖ –í—Å—Ç—Ä–µ—á–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞!\n` +
      `üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: ${session.startTime.toLocaleString("ru-RU")}\n` +
      (response.data.hangoutLink ? `üîó –°—Å—ã–ª–∫–∞ –Ω–∞ Google Meet: ${response.data.hangoutLink}\n` : "") +
      `üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${phone}\n` +
      `üë§ –ò–º—è: ${name}`
    )

    sessions.delete(userId)
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è:", err)
    await ctx.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Å—Ç—Ä–µ—á—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
  }
})

// --- Webhook handler –¥–ª—è Next.js ---
export async function POST(req: NextRequest) {
  try {
    const body = await req.json()
    await bot.handleUpdate(body)
    return NextResponse.json({ ok: true })
  } catch (err) {
    console.error("Telegram webhook error:", err)
    return NextResponse.json({ error: "failed" }, { status: 500 })
  }
}
