import { Telegraf, Markup } from "telegraf"
import { google } from "googleapis"
import { NextRequest, NextResponse } from 'next/server'

const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN!
const bot = new Telegraf(BOT_TOKEN)

// --- Google Calendar –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ ---
const SCOPES = ["https://www.googleapis.com/auth/calendar"] // üî• –£–ë–†–ê–õ –õ–ò–®–ù–ò–ô –ü–†–û–ë–ï–õ!
const CALENDAR_ID = process.env.GOOGLE_CALENDAR_ID!
// const OWNER_EMAIL = process.env.OWNER_EMAIL!

// –ë–µ—Ä—ë–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–∑ env
const GOOGLE_CLIENT_EMAIL = process.env.GOOGLE_CLIENT_EMAIL!
const GOOGLE_PRIVATE_KEY = process.env.GOOGLE_PRIVATE_KEY!.replace(/\\n/g, "\n")

const auth = new google.auth.JWT({
  email: GOOGLE_CLIENT_EMAIL,
  key: GOOGLE_PRIVATE_KEY,
  scopes: SCOPES,
})
const calendar = google.calendar({ version: "v3", auth })

// –ü—Ä–æ—Å—Ç–∞—è "—Å–µ—Å—Å–∏—è" –≤ –ø–∞–º—è—Ç–∏ (–¥–ª—è demo; –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ ‚Äî Redis –∏–ª–∏ –ë–î)
const sessions = new Map<string, { startTime?: Date }>()

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–ª–∏–∂–∞–π—à–∏—Ö —Å–ª–æ—Ç–æ–≤ (–∑–∞–≤—Ç—Ä–∞ —Å 9:00 –¥–æ 18:00 —Å —à–∞–≥–æ–º 30 –º–∏–Ω)
function generateTimeSlots(): { date: Date; label: string }[] {
  const slots = []
  const now = new Date()
  const tomorrow = new Date(now)
  tomorrow.setDate(now.getDate() + 1)
  tomorrow.setHours(9, 0, 0, 0) // –ù–∞—á–∏–Ω–∞–µ–º —Å 9:00

  for (let i = 0; i < 18; i++) { // 9:00‚Äì18:00 ‚Üí 18 —Å–ª–æ—Ç–æ–≤
    const slot = new Date(tomorrow.getTime() + i * 30 * 60 * 1000)
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—à–µ–¥—à–∏–µ (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Å–µ–π—á–∞—Å —É–∂–µ –ø–æ–∑–¥–Ω–æ)
    if (slot > now) {
      slots.push({
        date: slot,
        label: slot.toLocaleTimeString("ru-RU", { hour: "2-digit", minute: "2-digit" })
      })
    }
  }
  return slots.slice(0, 5) // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
}

async function getAvailableSlots(): Promise<{ start: Date; end: Date; label: string }[]> {
  const slots: { start: Date; end: Date; label: string }[] = []
  const now = new Date()
  
  for (let dayOffset = 1; dayOffset <= 5; dayOffset++) {
    const day = new Date(now)
    day.setDate(now.getDate() + dayOffset)
    
    // –†–∞–±–æ—á–∏–µ —á–∞—Å—ã
    const startHour = 11
    const endHour = 19
    
    for (let h = startHour; h < endHour; h++) {
      for (const m of [0, 20]) {
        const slotStart = new Date(day)
        slotStart.setHours(h, m, 0, 0)
        const slotEnd = new Date(slotStart.getTime() + 30*60*1000)

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ Google Calendar, –Ω–µ—Ç –ª–∏ —Å–æ–±—ã—Ç–∏–π –≤ —ç—Ç–æ—Ç —Å–ª–æ—Ç
        const events = await calendar.events.list({
          calendarId: CALENDAR_ID!,
          timeMin: slotStart.toISOString(),
          timeMax: slotEnd.toISOString(),
          singleEvents: true,
          orderBy: "startTime",
        })

        if (!events.data.items || events.data.items.length === 0) {
          slots.push({
            start: slotStart,
            end: slotEnd,
            label: slotStart.toLocaleString("ru-RU", { hour: "2-digit", minute: "2-digit", day: "2-digit", month: "2-digit" })
          })
        }
      }
    }
  }
  return slots
}

bot.start((ctx) => {
  ctx.reply("–ü—Ä–∏–≤–µ—Ç! üëã –ù–∞–ø–∏—à–∏ /book, —á—Ç–æ–±—ã –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Å—Ç—Ä–µ—á—É.")
})

bot.command("book", async (ctx) => {
  const slots = await getAvailableSlots()
  if (slots.length === 0) return ctx.reply("–ù–∞ –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏ –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ üòî")

  const buttons = slots.slice(0, 10).map(slot => [
    Markup.button.callback(slot.label, `select_${slot.start.getTime()}`)
  ])

  ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:", Markup.inlineKeyboard(buttons))
})

bot.action(/select_(\d+)/, (ctx) => {
  const timestamp = parseInt(ctx.match[1])
  const startTime = new Date(timestamp)

  sessions.set(String(ctx.from!.id), { startTime })

  ctx.replyWithMarkdown(
    `–í—ã –≤—ã–±—Ä–∞–ª–∏: *${startTime.toLocaleString("ru-RU")}*\n\n` +
    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:"
  )
})

bot.on("text", async (ctx) => {
  const userId = String(ctx.from!.id)
  const session = sessions.get(userId)
  if (!session || !session.startTime) return

  const email = ctx.message.text.trim()
  if (!/^[\w.-]+@[\w.-]+\.\w+$/.test(email)) {
    return ctx.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
  }

  const endTime = new Date(session.startTime.getTime() + 30 * 60 * 1000)

  try {
    const event = {
      summary: "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è",
      description: `–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ Telegram-–±–æ—Ç–∞.\nEmail –∫–ª–∏–µ–Ω—Ç–∞: ${email}`,
      start: {
        dateTime: session.startTime.toISOString(),
        timeZone: "Europe/Kiev", // üî• –£–ö–ê–ñ–ò–¢–ï –°–í–û–ô –ß–ê–°–û–í–û–ô –ü–û–Ø–°!
      },
      end: {
        dateTime: endTime.toISOString(),
        timeZone: "Europe/Kiev",
      },
      // attendees: [
      //   { email: OWNER_EMAIL! },
      //   { email },
      // ],
      conferenceData: {
        createRequest: { requestId: `tg-${Date.now()}` },
      },
    }

    const response = await calendar.events.insert({
      calendarId: CALENDAR_ID!,
      requestBody: event,
      conferenceDataVersion: 1,
    })

    await ctx.reply(
      `‚úÖ –í—Å—Ç—Ä–µ—á–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞!\n\n` +
      `üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: ${session.startTime.toLocaleString("ru-RU")}\n` +
      (response.data.hangoutLink
        ? `üîó –°—Å—ã–ª–∫–∞ –Ω–∞ Google Meet: ${response.data.hangoutLink}\n`
        : `‚ÑπÔ∏è –°—Å—ã–ª–∫–∞ –ø–æ—è–≤–∏—Ç—Å—è –≤ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏.\n`) +
      `üìß –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ ${email}.`
    )

    sessions.delete(userId)
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è:", err)
    await ctx.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Å—Ç—Ä–µ—á—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
  }
})

// Webhook handler
export async function POST(req: NextRequest) {
  try {
    const body = await req.json()
    await bot.handleUpdate(body)
    return NextResponse.json({ ok: true })
  } catch (err) {
    console.error("Telegram webhook error:", err)
    return NextResponse.json({ error: "failed" }, { status: 500 })
  }
}