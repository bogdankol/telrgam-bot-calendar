import { Telegraf, Markup } from 'telegraf';
import { google, calendar_v3 } from 'googleapis';
import { NextRequest, NextResponse } from 'next/server';
import { DateTime } from 'luxon';

const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN!;
const bot = new Telegraf(BOT_TOKEN);

// --- Google Calendar –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ ---
const SCOPES = ['https://www.googleapis.com/auth/calendar'];
const CALENDAR_ID = process.env.GOOGLE_CALENDAR_ID!;
const GOOGLE_CLIENT_EMAIL = process.env.GOOGLE_CLIENT_EMAIL!;
const GOOGLE_PRIVATE_KEY = process.env.GOOGLE_PRIVATE_KEY!.replace(/\\n/g, '\n');
const TIMEZONE = 'Europe/Kiev';

const auth = new google.auth.JWT({
  email: GOOGLE_CLIENT_EMAIL,
  key: GOOGLE_PRIVATE_KEY,
  scopes: SCOPES,
});

const calendar = google.calendar({ version: 'v3', auth });

// –ü—Ä–æ—Å—Ç–∞—è "—Å–µ—Å—Å–∏—è" –≤ –ø–∞–º—è—Ç–∏
const sessions = new Map<
  string,
  { startTime?: Date; phone?: string; name?: string; email?: string }
>();

// --- –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–Ω–µ–π ---
async function getAvailableDays(daysAhead = 30, minDays = 10) {
  const now = DateTime.now().setZone(TIMEZONE);
  const availableDays: DateTime[] = [];

  for (let i = 1; i <= daysAhead; i++) {
    const day = now.plus({ days: i });
    const weekday = day.weekday; // 1 = Monday, 7 = Sunday
    if (weekday === 6 || weekday === 7) continue; // –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—É–±–±–æ—Ç—É –∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ

    const slots = await getAvailableSlotsForDay(day);

    if (slots.length > 0 || availableDays.length < minDays) {
      availableDays.push(day);
    }

    if (availableDays.length >= minDays) break;
  }

  return availableDays;
}

// --- –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–æ—Ç–æ–≤ ---
async function getAvailableSlotsForDay(day: DateTime) {
  const slots: { start: DateTime; label: string }[] = [];
  const startHour = 11;
  const endHour = 19;
  const meetingDuration = 60; // –º–∏–Ω
  const breakAfterMeeting = 30; // –º–∏–Ω
  const maxMeetingsPerDay = 5;

  let meetingsCount = 0;
  let slotStart = day.set({ hour: startHour, minute: 0, second: 0, millisecond: 0 });

  while (meetingsCount < maxMeetingsPerDay) {
    const slotEnd = slotStart.plus({ minutes: meetingDuration });

    const res = await calendar.events.list({
      // @ts-expect-error
      calendarId: CALENDAR_ID,
      timeMin: slotStart.toISO(),
      timeMax: slotEnd.toISO(),
      singleEvents: true,
    });

    // @ts-expect-error
    const events = res.data.items || [];

    if (events.length === 0) {
      slots.push({
        start: slotStart,
        label: slotStart.toFormat('HH:mm'),
      });
      meetingsCount++;
      slotStart = slotEnd.plus({ minutes: breakAfterMeeting });
    } else {
      slotStart = slotEnd.plus({ minutes: breakAfterMeeting });
    }

    if (slotStart.hour >= endHour) break;
  }

  return slots;
}

// --- –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ---
bot.start((ctx) => {
  ctx.reply('–ü—Ä–∏–≤–µ—Ç! üëã –ù–∞–ø–∏—à–∏ /book, —á—Ç–æ–±—ã –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Å—Ç—Ä–µ—á—É.');
});

bot.command('book', async (ctx) => {
  const days = await getAvailableDays(30);
  const buttons = days.map((d) => [
    Markup.button.callback(d.toFormat('dd.MM.yyyy'), `day_${d.toISO()}`),
  ]);
  ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏:', Markup.inlineKeyboard(buttons));
});

// --- –í—ã–±–æ—Ä –¥–Ω—è ---
bot.action(/day_(.+)/, async (ctx) => {
  const day = DateTime.fromISO(ctx.match[1]).setZone(TIMEZONE);
  const slots = await getAvailableSlotsForDay(day);

  if (slots.length === 0) return ctx.reply('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å.');

  const buttons = slots.map((s) => [
    Markup.button.callback(s.label, `slot_${s.start.toMillis()}`),
  ]);

  ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:', Markup.inlineKeyboard(buttons));
});

// --- –í—ã–±–æ—Ä —Å–ª–æ—Ç–∞ –∏ –∑–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç–∞–∫—Ç–∞ ---
bot.action(/slot_(\d+)/, (ctx) => {
  const timestamp = parseInt(ctx.match[1]);
  const startTime = DateTime.fromMillis(timestamp).toJSDate(); // —Å–æ—Ö—Ä–∞–Ω—è–µ–º JS Date
  sessions.set(String(ctx.from!.id), { startTime });

  ctx.reply(
    '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±—Ä–æ–Ω–∏:',
    Markup.keyboard([Markup.button.contactRequest('üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç')])
      .oneTime()
      .resize(),
  );
});

// --- –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ ---
bot.on('contact', (ctx) => {
  const userId = String(ctx.from!.id);
  const session = sessions.get(userId);
  if (!session || !session.startTime) return;

  const contact = ctx.message.contact;
  session.phone = contact.phone_number;
  session.name =
    contact.first_name + (contact.last_name ? ' ' + contact.last_name : '');
  sessions.set(userId, session);

  ctx.reply('–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±—Ä–æ–Ω–∏:');
});

// --- –û–±—Ä–∞–±–æ—Ç–∫–∞ email –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è ---
bot.on('text', async (ctx) => {
  const userId = String(ctx.from!.id);
  const session = sessions.get(userId);
  if (!session || !session.startTime || !session.phone) return;

  const email = ctx.message.text.trim();
  if (!/^[\w.-]+@[\w.-]+\.\w+$/.test(email)) {
    return ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:');
  }

  session.email = email;
  sessions.set(userId, session);

  const start = DateTime.fromJSDate(session.startTime, { zone: TIMEZONE });
  const end = start.plus({ minutes: 60 });

  try {
    const event: calendar_v3.Schema$Event = {
      summary: '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è',
      description: `–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ Telegram-–±–æ—Ç–∞.\n–ö–ª–∏–µ–Ω—Ç: ${session.name}\n–¢–µ–ª–µ—Ñ–æ–Ω: ${session.phone}\nEmail: ${session.email}\nüí∞ –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã: –ù–ï –æ–ø–ª–∞—á–µ–Ω–æ`,
      start: { dateTime: start.toISO(), timeZone: TIMEZONE },
      end: { dateTime: end.toISO(), timeZone: TIMEZONE },
      conferenceData: { createRequest: { requestId: `tg-${Date.now()}` } },
    };

    const res = await calendar.events.insert({
      calendarId: CALENDAR_ID,
      requestBody: event,
      conferenceDataVersion: 1,
    });

    const paymentLink = 'https://send.monobank.ua/jar/XXXXXXXXX'; // –≤–∞—à–∞ —Å—Å—ã–ª–∫–∞
    const amount = 800;

    await ctx.reply(
      `‚úÖ –í—Å—Ç—Ä–µ—á–∞ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞!\n` +
        `üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: ${start.toFormat('dd.MM.yyyy HH:mm')}\n` +
        (res.data.hangoutLink
          ? `üîó –°—Å—ã–ª–∫–∞ –Ω–∞ Google Meet: ${res.data.hangoutLink}\n`
          : `‚ÑπÔ∏è –°—Å—ã–ª–∫–∞ –ø–æ—è–≤–∏—Ç—Å—è –≤ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏.\n`) +
        `üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${session.phone}\n` +
        `üë§ –ò–º—è: ${session.name}\n` +
        `üìß Email: ${session.email}\n\n` +
        `üí∞ –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã: ‚ùå –ù–ï –æ–ø–ª–∞—á–µ–Ω–æ\n` +
        `–°—É–º–º–∞: ${amount} –≥—Ä–Ω\n` +
        `üëâ [–û–ø–ª–∞—Ç–∏—Ç—å](${paymentLink})`,
      { parse_mode: 'Markdown' },
    );

    sessions.delete(userId);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è:', err);
    await ctx.reply('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Å—Ç—Ä–µ—á—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// --- Webhook handler ---
export async function POST(req: NextRequest) {
  try {
    const body = await req.json();
    await bot.handleUpdate(body);
    return NextResponse.json({ ok: true });
  } catch (err) {
    console.error('Telegram webhook error:', err);
    return NextResponse.json({ error: 'failed' }, { status: 500 });
  }
}
