import { Telegraf } from "telegraf"
import { google } from "googleapis"

const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN!
const bot = new Telegraf(BOT_TOKEN)

// --- Google Calendar –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ ---
const SCOPES = ["https://www.googleapis.com/auth/calendar"]
const CALENDAR_ID = process.env.GOOGLE_CALENDAR_ID!

// –ë–µ—Ä—ë–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–∑ env (–ª—É—á—à–µ —á–µ–º —Ö—Ä–∞–Ω–∏—Ç—å json)
const GOOGLE_CLIENT_EMAIL = process.env.GOOGLE_CLIENT_EMAIL!
const GOOGLE_PRIVATE_KEY = process.env.GOOGLE_PRIVATE_KEY!.replace(/\\n/g, "\n")

const auth = new google.auth.JWT({
  email: GOOGLE_CLIENT_EMAIL,
  key: GOOGLE_PRIVATE_KEY,
  scopes: SCOPES,
})
const calendar = google.calendar({ version: "v3", auth })

// –ü—Ä–æ—Å—Ç–∞—è "—Å–µ—Å—Å–∏—è" –≤ –ø–∞–º—è—Ç–∏ (–¥–ª—è demo)
const sessions = new Map<string, { startTime?: Date }>()

bot.command("book", (ctx) => {
  // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã —Å—Ä–∞–∑—É –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ–¥–Ω–æ –≤—Ä–µ–º—è
  const startTime = new Date()
  startTime.setDate(startTime.getDate() + 1)
  startTime.setHours(10, 0, 0, 0)

  sessions.set(String(ctx.from!.id), { startTime })
  ctx.reply(
    `–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤—Ä–µ–º—è: ${startTime.toLocaleString("ru-RU")}\n` +
      "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à e-mail –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±—Ä–æ–Ω–∏:"
  )
})

bot.on("text", async (ctx) => {
  const session = sessions.get(String(ctx.from!.id))
  if (!session || !session.startTime) return

  const email = ctx.message.text.trim()
  if (!/^[\w.-]+@[\w.-]+\.\w+$/.test(email)) {
    return ctx.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç e-mail, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
  }

  const endTime = new Date(session.startTime.getTime() + 30 * 60 * 1000)

  try {
    const event = {
      summary: "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è",
      description: `–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram-–±–æ—Ç–∞.\nEmail –∫–ª–∏–µ–Ω—Ç–∞: ${email}`,
      start: { dateTime: session.startTime.toISOString() },
      end: { dateTime: endTime.toISOString() },
      conferenceData: { createRequest: { requestId: `tg-${Date.now()}` } },
    }

    const response = await calendar.events.insert({
      calendarId: CALENDAR_ID!,
      requestBody: event,
      conferenceDataVersion: 1,
    })

    ctx.reply(
      `‚úÖ –í—Å—Ç—Ä–µ—á–∞ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞!\n` +
        `üìÖ –î–∞—Ç–∞: ${session.startTime.toLocaleString("ru-RU")}\n` +
        `üîó –°—Å—ã–ª–∫–∞ –Ω–∞ Google Meet: ${response.data.hangoutLink}\n` +
        `üì© –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–∑–∂–µ.`
    )
    sessions.delete(String(ctx.from!.id))
  } catch (err) {
    console.error(err)
    ctx.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏")
  }
})
