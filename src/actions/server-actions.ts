'use server'

import { calendar_v3 } from 'googleapis'
import { DateTime } from 'luxon'
// import { TCheckInvoiceStatus, TPaymentGeneratedLink } from '@/lib/types'
// import { envCheck } from '@/utils/server-utils'

// const MONO_API_TOKEN = process.env.MONO_API_TOKEN_TEST!
// const MONO_BASIC_URL = process.env.MONO_API_BASIC_URL!
// const PROJECT_URL = process.env.BASIC_URL!

// export async function createNewInvoiceLink(): Promise<TPaymentGeneratedLink | undefined> {

//   const allEnvIsPresent = await envCheck()
//   console.log({allEnvIsPresent})
//   if(!allEnvIsPresent) {
//     throw Error('Some error occurred')
//   }

//   const MONO_BASIC_URL = process.env.MONO_API_BASIC_URL!
//   const monoToken = process.env.MONO_API_TOKEN_TEST!
//   const fee = process.env.FEE_FOR_SERVICE_IN_GRN!

//   const sumInCopiyka = Number(fee) * 100

//   try {
//     const res = await fetch(MONO_BASIC_URL + 'api/merchant/invoice/create', {
//       method: "POST",
//       headers: {
//         'Content-Type': 'application/json',
//         'X-Token': monoToken
//       },
//       body: JSON.stringify({
//         amount: sumInCopiyka,
//         webhookUrl: PROJECT_URL + `/api/mono-webhook`
//       })
//     })

//     const response: TPaymentGeneratedLink = await res.json()
//     console.log({ response })
//     return response
//   } catch(err: unknown) {
//     console.error('Invoice creation error:', err instanceof Error ? err.message : err)
//     return
//   }

// }

// export async function getStatusOfInvoiceById(id: string): Promise<TCheckInvoiceStatus | undefined> {
//   await envCheck()

//   try {
//     const res = await fetch(MONO_BASIC_URL + `api/merchant/invoice/status?invoiceId=${id}`, {
//       method: 'GET',
//       headers: {
//         'Content-Type': 'application/json',
//         'X-Token': MONO_API_TOKEN
//       }
//     })
//     const response: TCheckInvoiceStatus = await res.json()
//     return response
//   } catch(err: unknown) {
//     console.error('Invoice creation error:', err instanceof Error ? err.message : err)
//     return
//   }
// }

export async function getUpcomingMeetings(userId: string, timezone: string, calendar: calendar_v3.Calendar, calendar_id: string, ctx: any) {
	try {
		// –ë–µ—Ä—ë–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –¥–∏–∞–ø–∞–∑–æ–Ω 2 –Ω–µ–¥–µ–ª–∏ –≤–ø–µ—Ä—ë–¥
		const now = DateTime.now().setZone(timezone)
		const twoWeeksLater = now.plus({ weeks: 2 })

		// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –∑–∞ –ø–µ—Ä–∏–æ–¥
		const res = await calendar.events.list({
			calendarId: calendar_id,
			timeMin: now.toISO(),
			timeMax: twoWeeksLater.toISO(),
			singleEvents: true,
			orderBy: 'startTime',
		} as calendar_v3.Params$Resource$Events$List)

		const events = res?.data?.items || []

		console.log({ events })

		// –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ clientId
		const userEvents = events.filter(ev =>
			ev.description?.includes(`clientId: ${userId}`),
		)

		if (userEvents.length === 0) {
			return await ctx.reply(
				'‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∏—Ö –∑—É—Å—Ç—Ä—ñ—á–µ–π –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω—ñ 2 —Ç–∏–∂–Ω—ñ.',
			)
		}

		// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
		const message = userEvents
			.map(ev => {
				const startISO = ev.start?.dateTime || ev.start?.date
				const start = startISO
					? DateTime.fromISO(startISO)
							.setZone(timezone)
							.toFormat('dd.MM.yyyy HH:mm')
					: '–Ω–µ–≤—ñ–¥–æ–º–æ'
				return `üìÖ ${start}\n –§–æ—Ä–º–∞—Ç –∑—É—Å—Ç—Ä—ñ—á—ñ: ${
					ev.description?.match(/–§o—Ä–º–∞—Ç –∑—É—Å—Ç—Ä—ñ—á—ñ: (.*)/)?.[1] ||
					'–Ω–µ–æ–±—Ö—ñ–¥–Ω–µ —É—Ç–æ—á–Ω–µ–Ω–Ω—è'
				}`
			})
			.join('\n\n')

		await ctx.reply(`–û—Å—å –≤–∞—à—ñ –º—ñ—Ç–∏–Ω–≥–∏ –Ω–∞ –Ω–∞–π–±–ª–∏–∂—á—ñ 2 —Ç–∏–∂–Ω—ñ:\n\n${message}`)
		await ctx.reply(
			`–î–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /start. –î–ª—è —Ç–æ–≥–æ, —â–æ–± –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –ø—Ä–æ –º–∞–π–±—É—Ç–Ω—ñ –∑—É—Å—Ç—Ä—ñ—á—ñ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /get_meetings`,
		)
	} catch (err) {
		console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–¥—ñ–π:', err)
		await ctx.reply(
			'‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –º—ñ—Ç–∏–Ω–≥—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.',
		)
	}
}
